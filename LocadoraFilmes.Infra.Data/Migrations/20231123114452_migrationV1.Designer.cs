// <auto-generated />
using System;
using LocadoraFilmes.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LocadoraFilmes.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231123114452_migrationV1")]
    partial class migrationV1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FilmeGenero", b =>
                {
                    b.Property<int>("IdFilme")
                        .HasColumnType("INT");

                    b.Property<int>("IdGenero")
                        .HasColumnType("INT");

                    b.HasKey("IdFilme", "IdGenero");

                    b.HasIndex("IdGenero");

                    b.ToTable("FilmeGenero");
                });

            modelBuilder.Entity("FilmeLocacao", b =>
                {
                    b.Property<int>("IdFilme")
                        .HasColumnType("INT");

                    b.Property<int>("IdLocacao")
                        .HasColumnType("INT");

                    b.HasKey("IdFilme", "IdLocacao");

                    b.HasIndex("IdLocacao");

                    b.ToTable("FilmeLocacao");
                });

            modelBuilder.Entity("LocadoraFilmes.Domain.Entities.Cliente", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("VARCHAR(350)")
                        .HasColumnName("Senha");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cpf" }, "IX_Cpf_Cliente");

                    b.HasIndex(new[] { "Id" }, "IX_Id_Cliente");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("LocadoraFilmes.Domain.Entities.Filme", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT")
                        .HasColumnName("FlgAtivo");

                    b.Property<DateTime?>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Id_Filme");

                    b.ToTable("Filme");
                });

            modelBuilder.Entity("LocadoraFilmes.Domain.Entities.Genero", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT")
                        .HasColumnName("FlgAtivo");

                    b.Property<DateTime?>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCriacao")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Id_Genero");

                    b.ToTable("Genero");
                });

            modelBuilder.Entity("LocadoraFilmes.Domain.Entities.Locacao", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CpfCliente")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("CpfCliente");

                    b.Property<DateTime?>("DataLocacao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataLocacao");

                    b.Property<int>("IdFilmesLocacao")
                        .HasColumnType("INT")
                        .HasColumnName("IdFilmesLocacao");

                    b.HasKey("Id");

                    b.HasIndex("CpfCliente")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "IX_Id_Locacao");

                    b.ToTable("Locacao");
                });

            modelBuilder.Entity("FilmeGenero", b =>
                {
                    b.HasOne("LocadoraFilmes.Domain.Entities.Filme", null)
                        .WithMany()
                        .HasForeignKey("IdFilme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocadoraFilmes.Domain.Entities.Genero", null)
                        .WithMany()
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmeLocacao", b =>
                {
                    b.HasOne("LocadoraFilmes.Domain.Entities.Filme", null)
                        .WithMany()
                        .HasForeignKey("IdFilme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocadoraFilmes.Domain.Entities.Locacao", null)
                        .WithMany()
                        .HasForeignKey("IdLocacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocadoraFilmes.Domain.Entities.Locacao", b =>
                {
                    b.HasOne("LocadoraFilmes.Domain.Entities.Cliente", "Cliente")
                        .WithOne("Locacao")
                        .HasForeignKey("LocadoraFilmes.Domain.Entities.Locacao", "CpfCliente")
                        .HasPrincipalKey("LocadoraFilmes.Domain.Entities.Cliente", "Cpf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LocadoraFilmes.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Locacao");
                });
#pragma warning restore 612, 618
        }
    }
}
